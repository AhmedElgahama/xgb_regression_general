#!/usr/bin/env Rscript

## ---- Initialising libraries ----
library(tibble)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(stringr)
library(lubridate)
library(glue)
library(zeallot)
library(pROC)
library(forcats)
library(rjson)
library(caTools)
library(CatEncoders)

options(dplyr.summarise.inform = FALSE)

## Script that holp helper functions
source('algorithm/0.common_funcs.R')


# Get the training data file
data   <-
  glue(
    '/opt/ml_vol/inputs/data/testing/regressionBaseMainInput/',
    list.files(path = "/opt/ml_vol/inputs/data/testing/regressionBaseMainInput")
  )



tester <- function(data_path)
{
  ## Load model and test data
  trained_model         <-
    read_rds(
      '/opt/ml_vol/model/artifacts/model.rds'
    )
  variables_to_encode   <- trained_model$variables_to_encode
  id_column             <- trained_model$id_column
  exp_vars              <- trained_model$exp_vars
  encodings             <- trained_model$encodings
  variables_numeric     <- trained_model$variables_numeric
  df_test             <- read_csv(data_path)
  
  
  id <- df_test %>% select(id_column)
  
  
  
  df_test[variables_to_encode] <-
    sapply(df_test[variables_to_encode], as.character)
  df_test[variables_numeric]   <-
    sapply(df_test[variables_numeric], as.numeric)
  
  
  full_data_numeric <- df_test %>%
    select(-id_column, -variables_to_encode)
  full_data_numeric <- as.data.frame(scale(full_data_numeric))
  
  
  
  if (length(variables_to_encode) != 0)
  {
    full_data_categorical <-
      df_test  %>% select(variables_to_encode) %>%
      mutate(across(everything(), ~ replace_na(.x, calc_mode(.x))))
    
    for (i in variables_to_encode) {
      #define original categorical labels
      encoding <- encodings[[i]]
      #convert labels to numeric values
      full_data_categorical[[i]] = transform(encoding, full_data_categorical[[i]])
    }
    df_test <-
      cbind(id, full_data_numeric, full_data_categorical)
    
  } else{
    df_test <-
      cbind(id, full_data_numeric)
    
  }
  model <- trained_model$mdl
  
  ## Getting probability of each row for the target_class
  test_results <-
    tester_func(mdl = model,
                test_set = df_test)
  
  test_results <- test_results$test_predictions
  
  ## Saving ids with prediction
  predictions <- cbind(id, test_results)
  predictions %>% write.csv(
    '/opt/ml_vol/outputs/testing_outputs/test_predictions.csv', row.names=FALSE
  )
}



tryCatch(
  # Specifying expression
  expr = {
    tester(data)
  },
  # Specifying error message
  error = function(e) {
    write(e %>% as.character(), file = "/opt/ml_vol/outputs/errors/test_failure.txt", append =
            FALSE)
  }
)
